import { getFromLocalStorage, setInLocalStorage } from "../helpers/local-storage-helper";
import { Cluster } from "../models/cluster";
import { computed, effect, signal } from "@preact/signals-react";
import { copyObject } from "../helpers/object-helper";

export interface ConfigurationData {
  cluster: string;
  namespace: string;
  clusters: Cluster[];
}


const configurationKey = "configuration";
const defaultConfiguration: ConfigurationData = {
  cluster: "",
  clusters: [],
  namespace: "default"
};


const configuration = signal<ConfigurationData>(getFromLocalStorage(configurationKey, defaultConfiguration));
const selectedCluster = computed(() => configuration.value.clusters.find(c => c.name === configuration.value.cluster));
const selectedClusterApiUrl = computed(() => selectedCluster.value?.apiUrl);
const selectedNamespace = computed(() => configuration.value.namespace);
const seletedClusterKubeconfig = computed(() => "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSQ1ZFTkRRV1V5WjBGM1NVSkJaMGxKV2xCU2MxVnpRbVY2TVd0M1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUa1JCTUUxcVJYZFBWRlV6VFhwYVlVWjNNSHBPUkVFd1RWUnJlRTFFUVhsTmVscGhUVUpWZUFwRmVrRlNRbWRPVmtKQlRWUkRiWFF4V1cxV2VXSnRWakJhV0UxM1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTENrRnZTVUpCVVVNclJHVm5VVWhqUVhJeVRYUnJRM1pzTUdRdldrUnNZMHhxV2t0SU16STBaM0ZyTm5OT1RIQlZXVTA0ZURkM0wxQkdSa3MzYzI1MVpXa0tORmMwUkdOVFdrVnNaMkpFTVc1QmNGSXdabVo1UldJeGF6ZHlSRXM1V1dkNlN6WjJUUzg1THpsbGJXWk9VbkJ6Vms5VVVtcGhTbEZ3T0cxMVZWWlhWUXBhWVhGVmRqTkpiRnBxV25OaWRYVllVR2s0VDJOWk1EQlNZVWRXWTNOdlMwbzFZbkV5WVc1VGVHZHlNRU0wVTFvMGFsZG5LMjlNWTAxUlZFMDJLMDlCQ2pVNVdXMWFRelExY2pZdlUxTkNOVnBOTm1KR2IyWlRabkJ6TVd0cU9UVm1XbVZCWTNORWJYQmtjMHBzUlZOd1JYZHhNVTFpV1RsdlUyOTNVemR2VlRnS1JFOUZlV3N5ZVhOSWRHWk5hMWs0V21obU5IWkxWVTVvZFVWbk4ycEpZakpYYkhOa1JEaHBUMlZRVmtFdmNqQndSa1YyYTBsSWEzZHNVemhwU2tzd1RncFFSa1ZqVW05d1RHbHViRmxEVDFWclJtdE9VRFl6VjJOWGJGRnlRV2ROUWtGQlIycFhWRUpZVFVFMFIwRXhWV1JFZDBWQ0wzZFJSVUYzU1VOd1JFRlFDa0puVGxaSVVrMUNRV1k0UlVKVVFVUkJVVWd2VFVJd1IwRXhWV1JFWjFGWFFrSlJWbEJVY0ZkMU5raFhXVzFJUkV4cFRYWnhaekZFY2pWNFdsQlVRVllLUW1kT1ZraFNSVVZFYWtGTloyZHdjbVJYU214amJUVnNaRWRXZWsxQk1FZERVM0ZIVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUXpkcFVHWkhUM1U0S3dwUFZsUjVUbk5PYVdwWk1tdEdlbVJ3UjFSUU9XMW5TR3BhU2tFMGFXdDRSVkJoV0ZnMmRHYzRkbmhTUTNGeFpYUnlWWGswVm5VeWVYQkJhaXQxY1hKaUNrNXNURmg1WlRScE1VOTBRa2htTVU4NGRXNHdWVmRoUjJ0VlJsRnRaVzlQWTJOUFVuaEVjbG96VWxoRFYwaGxNR1IyTDNsaFZsTlFLMGMwZVhOdWNtY0tVVFJ2YUdJdk1GVjZXWGd6T0hNM0swcDNSMFJSUTNOaVdITlpRWHBKV2tSSFEyeE5SRlIySzJ0bGVuaHVUVFZpVG5CVk1XWlVTWHAyUWxwbVVuSTRWQW80U1ZaTVUyVkJjMnRZT1dsamQwOVBTMUpYZEUxMFZWVnZRMFYxYkRGVk5YTkpPRGsxWWxkS2NXbHJXRzV2YjBSSlpFOUJlbUl3VkU5ck5HRndRMHhrQ2pOQmFYZHlibXR5VjA1YWRtUTRla2t2WWpKVEwyNTJiRkpTTVZKQ1V6aFVZVkZSTkVaTGRHdzRZMHQ2UTBVMFRpOVFTMUVyVjBsd00wVllVMGxZZWpVS05HZHVWMGRsZVVWNmFGRlBDaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEsKICAgIHNlcnZlcjogaHR0cHM6Ly9rdWJlcm5ldGVzLmRvY2tlci5pbnRlcm5hbDo2NDQzCiAgbmFtZTogZG9ja2VyLWRlc2t0b3AKY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGRvY2tlci1kZXNrdG9wCiAgICB1c2VyOiBkb2NrZXItZGVza3RvcAogIG5hbWU6IGRvY2tlci1kZXNrdG9wCmN1cnJlbnQtY29udGV4dDogZG9ja2VyLWRlc2t0b3AKa2luZDogQ29uZmlnCnByZWZlcmVuY2VzOiB7fQp1c2VyczoKLSBuYW1lOiBkb2NrZXItZGVza3RvcAogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUlJha05EUVdseFowRjNTVUpCWjBsSldEbHZLemhtTWtOSmR6QjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VGtSQk1FMXFSWGRQVkZVelRYcGFZVVozTUhsT1ZFRXhUV3BKZUU1VVRUUk9WRVpoVFVSWmVBcEdla0ZXUW1kT1ZrSkJiMVJFYms0MVl6TlNiR0pVY0hSWldFNHdXbGhLZWsxU2MzZEhVVmxFVmxGUlJFVjRTbXRpTWs1eVdsaEpkRnB0T1hsTVYxSnNDbU15ZERCaU0wRjNaMmRGYVUxQk1FZERVM0ZIVTBsaU0wUlJSVUpCVVZWQlFUUkpRa1IzUVhkblowVkxRVzlKUWtGUlEyOTRhbEZyTlhNeVZERXJUV2dLZVhGcVVXSlJWa3Q2Y2xwNlVTODBSbVIxZFVFMVdIQTFTV3B0U0ZWSlJHZEJlV2xMU1ZGMk9GZFdhMEY0VGpOUWFUVkZPVUo0YUhOSk4yZE5XbWd3UndwMmVXdFZRM1pPVDFBM2FYSndaRVkyTUZaeVFrSm9SWHBTTldoNVQyUnphVVJGVGpOSmVHWXZZV04xUTFwM1EyRkxUMU5sU1d4cFZtc3JSa1FyUW1wMENuRnVRVk0zZGxadlEySjJaVzVvWWk5b2RtTnFWMFF2UzI5WlRFRkpaM1l3ZFhscVpFWjRXRTl0UW5aWlNraGpUa3hIZWpCcGQzSnlRWFYzTlZOc1puRUtWVk53ZEU4MlRETktiM05qWjBsdmRVbGlabkEzUVUwemRHbEZjWFppZFVSRWNYazJjRWRRZFc5aFZYWmxZVzh6TUVOTlVFbEVNRUZOVFdNM1YxSmlTZ3BETVVNM2RuWnFNakJxTmpkc2JuZEVTRVJFYW5wWU1rSTVkakIwT0VoVldreHpRazFuU0RsVGFGZG1ibmRqSzA4MFJreFNTbmREYkZaelFtSXhiM292Q2xrNWRqSnVXVzlrUVdkTlFrRkJSMnBrVkVKNlRVRTBSMEV4VldSRWQwVkNMM2RSUlVGM1NVWnZSRUZVUW1kT1ZraFRWVVZFUkVGTFFtZG5ja0puUlVZS1FsRmpSRUZxUVUxQ1owNVdTRkpOUWtGbU9FVkJha0ZCVFVJNFIwRXhWV1JKZDFGWlRVSmhRVVpDVlRsUGJHRTNiMlJhYVZsalRYVkplU3R4UkZWUGRncHVSbXM1VFVJd1IwRXhWV1JGVVZGWFRVSlRRMFZ0VW5aWk1uUnNZMmt4YldJelNYUmFSMVo2WVROU2RtTkVRVTVDWjJ0eGFHdHBSemwzTUVKQlVYTkdDa0ZCVDBOQlVVVkJTVEZuVjI4eVRtSm1ZMnhoUmpGS1RrVnhhbE4xVG1SaVIxbHFOREZZVDJGUlZXaEpTMFZ2YlZWeU4wWlpjalJXUzJkV05IRjJRMjRLVG5sa1RsZEtPVlFyZVZSR1pUUXZPVTh6YUdKTFREUmFlV1J2V1V0cWNrWktiR05sWVdabVdYaEJaSEoxU2pZM1ZDczJTV0pMU2s5SGRpdENXbXR1Y3dwVVlrd3JUMUpVUm14ME0wVXdiMWgwZW1SWVRubzFTbXhNWmxob1ZVNDFRV3N2ZW5sWFoxaHBNWFpJU1RsWGVDdFpWWEI0U3pONU5tWTNaMnRaUW5SS0NsZEZlRFp5TjNRdmFGSlpiVVJhTjNZdmNrOTNhMkpVYlhGd05WQk5XSHBWYlhwcll6QlBjR1E0Vld3d2QyNTZVbHBQY2s5UFZ6RmxSWEl5TTJoVE1HMEtTSFZKTlZRMVYxUTBkRUZpSzI1RWRrb3paa1J3TlhCVWVIbG9URGxIWjJGb1IwUnVVbTlMYTJweFlsVXJTMWxzZUhCaGNIRlhWMjB2TTB4dlFqTXJUQXBoYjBobWRUbFJWbmQ1VW5GVE5IRk9RazVIY2xWaGRDdExaMlY1UjFFOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjJkSlFrRkJTME5CVVVWQmNVMVpNRXBQWWs1ck9XWnFTV054YnpCSE1FWlRjell5WXpCUUswSllZbkpuVDFZMlpWTkpOV2d4UTBFMFFVMXZDbWxwUlV3dlJteGFRVTFVWkhvMGRWSlFVV05aWWtOUE5FUkhXV1JDY2pod1JrRnllbFJxS3pSeE5saFNaWFJHWVhkUldWSk5NR1ZaWTJwdVlrbG5lRVFLWkhsTldDOHlia3huYldOQmJXbHFhMjVwU2xsc1dsQm9VUzluV1RkaGNIZEZkVGN4WVVGdE56TndORmN2TkdJelNURm5MM2x4UjBOM1EwbE1PVXh6YndvelVtTldlbkJuWWpKRFVqTkVVM2h6T1VselN6WjNUSE5QVlhCWU5teEZjV0pVZFdrNWVXRk1TRWxEUzB4cFJ6TTJaWGRFVGpkWmFFdHlNamRuZHpaekNuVnhVbW8zY1Vkc1RETnRjVTQ1UVdwRWVVRTVRVVJFU0U4eGExZDVVWFJSZFRjM05EbDBTU3QxTlZvNFFYaDNkelE0TVRsblptSTVUR1pDTVVkVE4wRUtWRWxDTDFWdlZtNDFPRWhRYW5WQ1V6QlRZMEZ3Vm1KQlZ6bGhUUzh5VUdJNWNESkxTRkZKUkVGUlFVSkJiMGxDUVVKRVFqRlRNbEY1VUhGVU5XUmFWd3BGT1hKV05rUXJZMDVLZEZCT1pYQXJLM3BWUzBVNVdIaEpkbk5tWTBKNFRqQXZiV0V2UjBOeE1HdzFNRXhZTTAwMGNtWklaVFZLU2toYU5FWnBXRFZCQ2k5eFoyaDVhbE5NZFZJNE5UQkpiVGhRWVVkTGJ6WjVUM2RGUldaSk0xaEhPU3N2WkZOVFYzWTRSMlppUzBWRmJVeEZWRlJNYVRWNmVERnpSRk5DTlZrS00wNVlWV0ZuVGxKaVFtcFlXVE56ZEdkR05DOUNaRFYwYlU1cVVXNHdkbFU0Y1ZVdlNXMDBibkZUWlROVGVscHhWMlZtZG1WSldFaEZWbkZUVlVoSlRBcDNaRGxCU0ZJNFdrVkNibkpVVDB0aGJWZEVLM3A1TWtGNlJtOHlNa0ZZTlZNelZtVTFVRkZzVG1GbkswaFFiSFUzZURreWRFSkhNRTlwVjBOSldFOHhDbUZKT0c0d1JGWkRSMEp1ZHk5d2JVNXZiemRaZUhSM2QwdG5iekpTVEdOS1RTdENaUzltV0M5WFQycG9SbVFyYTBSRGNFdGxSeTlOUm1oV2EybEpjeThLVDBSbmVsUjVSVU5uV1VWQk1Va3labEpyWmxndmNXTndPRWR2UzJFNFpXTmliREpCTTA5alZEbEtWMWgwYTJKMUx6ZFlaR2hTZEdKcVlsRnROMnBXYUFvdkszWTROMlUxTkhOUVpUQjFhMUpQTTJOb2FHVTNUVzl3T0RoR09VNXpRemRTUXk5RVRtUnhRMjlFVVRWQ1UzRjRjRWN2WTNKbk9YRnlPVzg1TjFOR0NuQlJRM2x5T0hCR09EUmpjM0ZKYUUxWlJVdElPVmRLVEdkQlZEUTVjbEpDVW1ONmMwUTVka2hqVG10NWNFdzRNalZwYzBJeVNtdERaMWxGUVhrd1Z6Z0tjMjl1V1dsaVZWQkZWR0ZqYVRSdU1ESjJiRmhYWld4aGNtMVlOMjVHUVZkbk9VNHZaSFJsYm01UlZWTTBVekoyVUVOcFV6QmFjbkZYYldNNFJEZzRWZ3BZUm5ORlJVcHBUWGxYVGt4TVYyNWtOazVRZG5GcE4xTjVRMWd5TDAxWVVIRTRaVTFzTWxWV2NGWldiU3RZZUhCdVVIUnVjMHB6VFhGRFYwUmpRMDlaQ2xGbUswMDBjV1pVUWpSM2JrMTRUMWhwTUhFd016TmtZV05JV0ZWaGVrTTFUVzFsT0c1RFZVTm5XVUUzTVU5SVVURnphRzFXYjJadWRGQklZVUpSV25vS2VYSTFUR05KUTJScFREVTRRVTUxYkM4emRYSjZSbVZ3VHpsNk5XdFBNVlpNVVdreGMxUnpiMFphU1RaSVMwSlhjbVZHUkVGT2RXYzBVbGM0U25sd1lncHpVM05YV1d0NmJsSXZkVVpQU1hkYUsxVjZOamRuU0hRemNFOWtjSEZOTkVnd2IzUlZZa3d2UzJveldEaDNXVTB3Y1RKVE1WZHBURlZPYzBWR2VHMUpDbTVJWVZkM1JHTlVMMUV2VldORU4zbzJOR1JLWjFGTFFtZENMMkZzT0RGeGNVcEpOekl4WVZwT2EweDJjRmd4UkVsYWMyNWFSbmc0UVhObWJVUlJSWFlLWmxsUlJVY3pTVkoyTTIxdFJGSllhVlJqSzIwNVVqWm9iWFJ1YmxjM1QxUldOMjAyUkdsWWJ6a3phbmRhUTFBclVXdHdjU3RCUlVKWloydFBabkJMZFFwMlMzUnJNMlJYUVRSd1ozRkdUM0pUZDNSaU9FWlRiWE5hTUV0R1kxaERNazlVSzNwcFVFSm1Na041TmpONk5tMTNSakZqWlUxSGVURlZlazh6T1dFd0NsSjFkelZCYjBkQlJrWmFTalJOY0hkcE5VeFJNVGMwYjBjME1WRXphamRYY0UxeFN6UlBjWEkxZVhZMllrUTFZalpRVTBJdlYxWlNUWFpsV0c1M05UWUtTblJFTDNkRVIzVmxkMnBhZFdGMVRWVkphbmhMYlRkcGQwNVZiVVUxTTJ0Vk4wNXdaVzFWVldOTFMxRnFWamhtVTA5V2QzVTViWE5wSzBGUFIwUkJhZ3AxVkRsaldXOHpjMkZzYWsxMFZVZzNRMVZ3TDBjeWMzWXZaMUkzYm0xTE9HdHJiME5qVDNsMFdtSTJUbVpLUTJKeVQyczlDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQo=");

effect(() => {
  setInLocalStorage(configurationKey, configuration.value);
});

function updateConfiguration(updater: (c: ConfigurationData) => void) {
  const newConfig = copyObject(configuration.value);
  updater(newConfig);
  configuration.value = newConfig;
}

function setClusterAndNamespace(clusterName: string, namespace: string) {
  updateConfiguration(c => {
    c.cluster = clusterName;
    c.namespace = namespace;
  });
}

function addCluster(cluster: Cluster) {
  updateConfiguration(c => {
    c.clusters.push(cluster);
  });
}

function deleteCluster(clusterName: string) {
  updateConfiguration(c => {
    c.clusters = c.clusters.filter(x => x.name !== clusterName);
  });
}

export {
  configuration,
  selectedCluster,
  selectedClusterApiUrl,
  selectedNamespace,
  seletedClusterKubeconfig,
  setClusterAndNamespace,
  addCluster,
  deleteCluster
}